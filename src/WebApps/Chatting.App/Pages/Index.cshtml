@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
    <header>WebSocket Javascript Client</header>
</div>
<body>
<h1>WebSocket Javascript Client</h1>
<p id="stateLabel"> Ready To connect.</p>
<p id="connIDLable">connID: N/a</p>
<div>
    <label for="connectionUrl">Websocket Server Url:</label>
    <input id="connectionUrl"/>
    <button id="connectButton" type="submit">Connect</button>
    <button id="closeButton" disabled>Close Socket</button>
</div>
<p></p>
<div>
    <label for="sendMessage">Message:</label>
    <input id="sendMessage"/>
    <button id="sendButton" type="submit" disabled>Send</button>
</div>
<div>
    <label for="recipents"> Recipient Id:</label>
    <input id="recipents" disabled/>

</div>
<p></p>
<h2>Communication Log</h2>
<table style="width: 80px">
    <thread>
        <tr>
            <td style="width: 100px">From</td>
            <td style="width: 100px">To</td>
            <td>Data</td>
        </tr>
    </thread>
    <tbody id="commsLog"></tbody>
</table>
<script >
    var connectionUrl = document.getElementById("connectionUrl");
    var connectButton = document.getElementById("connectButton");
    var stateLabel = document.getElementById("stateLabel");
    var sendMessage = document.getElementById("sendMessage");
    var sendButton = document.getElementById("sendButton");
    var commsLog = document.getElementById("commsLog");
    var closeButton = document.getElementById("closeButton");
    var recipents = document.getElementById("recipents");
    var connID = document.getElementById("connIDLable");

    connectionUrl.value = "ws://localhost:5000";

    connectButton.onclick = function() {
        stateLabel.innerHTML = "Attempting to connect...";
        socket = new WebSocket(connectionUrl.value);
        socket.onopen = function(event) {
            updateState();
            commsLog.innerHTML += '<tr>' + '<td colspan="3"> Connection opened </td>' + '</tr>';
        }
        socket.onclose = function(event) {
            updateState();
            commsLog.innerHTML += '<tr>' + '<td colspan="3"> Connection closed. Code:' + htmlEscape(event.code) + 'Reason:' + htmlEscape(event.reason) + ' </td>' + '</tr>';
        }

        socket.onerror = updateState();
        socket.onmessage = function(event) {
            updateState();
            commsLog.innerHTML += '<tr>' + '<td> Server</td>' + '<td> Server</td>' + '<td>' + htmlEscape(event.code) + ' </td>' + '</tr>';
        }
    }
    closeButton.onclick = function() {
        if (!socket || socket.readyState !== WebSocket.OPEN) {
            alert("Socket not connected");
        }
        socket.close(1000, "Closing from client");
    };
    sendButton.onclick = function() {
        if (!socket || socket.readyState !== WebSocket.OPEN) {
            alert("Socket not connected");
        }
        var data = sendMessage.value;
        socket.send(data);
        commsLog.innerHTML += '<tr>' + '<td> Server</td>' + '<td> Server</td>' + '<td>' + htmlEscape(data) + ' </td>' + '</tr>';
    }

    function htmlEscape(str) {
        return str.toString()
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
    }

    function updateState() {
        function disable() {
            sendMessage.disable = true;
            sendButton.disable = true;
            closeButton.disable = true;
            recipents.disable = true;
        }

        function enable() {
            sendMessage.disable = false;
            sendButton.disable = false;
            closeButton.disable = false;
            recipents.disable = false;
        }

        connectionUrl.disable = true;
        connectButton.disable = true;
        if (!socket) {
            disable();
        } else {
            switch (socket.readyState) {
            case WebSocket.CLOSED:
                stateLabel.innerHTML = "Closed";
                connID.innerHTML = "ConnID: N/A";
                disable();
                connectionUrl.disable = false;
                connectButton.disable = false;
                break;
            case WebSocket.CLOSING:
                stateLabel.innerHTML = "Closing";
                disable();
                break;
            case WebSocket.OPEN:
                stateLabel.innerHTML = "Open";
                enable();
                break;
            default:
                stateLabel.innerHTML = "Unknown WebSocket State " + htmlEscape(socket.readyState);
            }
        }
    }
</script>
</body>